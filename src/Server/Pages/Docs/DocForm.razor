@using Markdig
@inject Service<Doc> DocService
@inject IMapper Mapper
@inject NavigationManager Nav
@inject DocEvents DocEvents

<EditForm Model="newDoc" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-6 col-xs-12">
            <h1>@Title</h1>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-xs-12">

            <div class="form-group">
                <label>Title</label>
                <input @bind="newDoc.Title" class="form-control"/>
                <ValidationMessage For="@(() => newDoc.Title)" />
            </div>

            <div class="form-group">
                <label>Url</label>
                <input @bind="newDoc.Url" class="form-control"/>
                <ValidationMessage For="@(() => newDoc.Url)" />
            </div>

            <div class="form-group">
                <label>Content</label>
                <textarea rows="10" @bind="newDoc.Content" class="form-control"/>
                <ValidationMessage For="@(() => newDoc.Content)" />
            </div>

        </div>

        <div class="col-md-6 col-xs-12">
            <label>Preview</label>
            <DocMarkdown Doc="newDoc"></DocMarkdown>
        </div>

    </div>

    <div class="row mt-3 mb-3">
        <div class="col-md-3 col-xs-12">
            <button class="btn btn-primary btn-block" type="submit">Submit</button>
        </div>
    </div>

</EditForm>

@code {
    [Parameter] public DocDto Value { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public string Title { get; set; }
    private DocDto newDoc = new DocDto();
    private bool isNew = true;

    private string Preview => Markdown.ToHtml(newDoc.Content ?? "");

    protected override void OnInitialized()
    {
        if (Value != null)
        {
            newDoc = Value;
            isNew = false;
        }
    }

    private async void HandleSubmit()
    {
        if (isNew)
        {
            var newDoc = await DocService.Add(Mapper.Map<Doc>(this.newDoc));
            DocEvents.NewDoc(Mapper.Map<DocDto>(newDoc));
        }
        else
        {
            await DocService.Update(Mapper.Map<Doc>(newDoc));
            DocEvents.UpdateDoc(newDoc);
        }

        Nav.NavigateTo($"docs/{newDoc.Url}");
    }
}